endian little

enum MessageType : u16 {
    CRT_State       = h0100,
    CRT_DataFrom    = h0102,
    CRT_DataTo      = h0103,

    Output_DigIn    = h1000,
    Output_DigOut   = h1020,
    Output_Door     = h1021,
    Output_AnIn     = h1040,
    Output_AnOut    = h1060,

    KP_ApuKpuState  = h10,
    KP_Datetime     = h12
}

###################################################
# INPUT, OUTPUT - State of digital input
###################################################

struct ApKp_DigIn {
    hwid: u32,
    input_number: u8
}

enum DigInState : u8 {
    S1 = h1,
    S2 = h2,
    S3 = h4,
    S4 = h8
}

struct KpAp_DigIn {
    hwid: u32,
    input_number: u8,
    old_state: u8,
    new_state: u8
}

struct ApKp_DigOut {
    hwid: u32,
    output_nr: u8,
    output_state: u8
}

###################################################
# INPUT, OUTPUT - State of digital output
###################################################

enum DigOutState : u8 {
    NotActive = b0,
    Blinking = b101,
    TimeControlled = b1100,
    PermanentlyActive = b1111
}

struct KpAp_DigOut {
    hwid: u32,
    output_nr: u8,
    old_state: u8,
    new_state: u8
}

###################################################
# INPUT, OUTPUT - DOOR
###################################################

enum DoorState : u8 {
    RelayInactive = h0,
    RelayActive = h1,
    TimeControlled = h2,
    IntervalControlled = h4
}

struct ApKp_DoorState {
    hwid: u32,
    door_nr: u8,
    state: u8
}

struct KpAp_DoorState {
    hwid: u32,
    door_nr: u8,
    old_state: u8,
    new_state: u8
}

###################################################
# MODULES - Data from ADN module
###################################################

struct ApKp_ModuleDataFrom {
    hwid: u32,
    data: [u8]
}

struct KpAp_ModuleDataTo {
    hwid: u32,
    data: [u8]
}

###################################################
# MODULES - ADN Module state
###################################################

enum ModuleState : u16 {
    FaultAP = B0,
    FaultVoltage = B1,
    PwrCommFault = B6,
    Tamper = B14,
    Reset = B15
}

enum ModuleCommState : u16 {
    LedOn = B6,
    UpdateLedSvc = B7,
    ThreeTimeNoResponse = B11,
    EraseExtMem = B12,
    ProgExtMem = B13,
    FirmwareUpgrade = B14,
    NoComm = B15
}

struct ApKp_AdnModuleState {
    hwid: u32
}

struct KpAp_AdnModuleState {
    hwid: u32,
    module_state: u16,
    comm_state: u16
}

###################################################
# MODULES - Power source state
###################################################

enum PwrState1 : u8 {
    RSer = B0,
    BatFault = B1,


    BatShorted = B4,
    BatMissing = B5,
    BatTempHigh = B6,
    OverTemperature = B7
}

enum PwrState2 : u8 {
    IInHigh = B0,
    IBatLow = B1,
    VBatLow = B2,
    VBatHigh = B3,
    VSysLow = B4,
    VSysHigh = B5,
    VInLow = B6,
    VInHigh = B7
}

enum PwrState3 : u8 {
    VSupLow = B0,
    VSupHigh = B1,
    ReducerEn = B2,


    OutHc = B5
}

struct ApKp_PwrState {
    hwid: u32,
    state1: u8,
    state2: u8,
    state3: u8
}

###################################################
# MODULES - Power source bind table
###################################################

 # TODO: dont fully understand to d3sb protocol

struct PrwSrcBound {
    hwid_module: u32,
    hwid_pwrsrc: u32
}

view PrwSrcBoundView {
    [PrwSrcBound],
    u32 # hwid
    # TODO: make no data e.g. 'empty'
}

struct ApKp_PrwSrcBound {
    bound_table: PrwSrcBoundView
}

###################################################
# COMMUNICATION PROCESSOR - APU and KPU state
###################################################

struct ApKp_ApKpState {
    hwid: u32
}

enum ApKpState1 : u8 {
    McuFwOutOfRange = B3,
    CannotSaveToSFlash = B4,
    CannotSaveToHeap = B5,
    SavedToSFlash = B6,
    SFlashPrograming = B7
}

enum ApKpState2 : u8 {
    StateQueueErased = B5,
    TooLongMessage = B4,
    WrongCrc = B2
}

enum ApKpState3 : u8 {
    KpuReseted = B7,
    KpuWDActivatedLedFaultOff = B6
}

enum ApKpState4 : u8 {
    Tamper1 = B1,
    Tamper2 = B0
}

struct KpAp_ApKpState {
    hwid: u32,
    state1: u8,
    state2: u8,
    state3: u8,
    state4: u8
}

###################################################
# COMMUNICATION PROCESSOR - Date and time
###################################################

struct ApKp_Datetime {
    year: u16,
    month: u8,
    day: u8,
    wday: u8,
    hour: u8,
    minute: u8,
    second: u8
}

struct KpAp_Datetime {
    year: u16,
    month: u8,
    day: u8,
    wday: u8,
    hour: u8,
    minute: u8,
    second: u8
}


###################################################
# POWER SOURCE - I2C messages
###################################################

# GetType

struct PwrSrc_GetType_Response {
    typ: u8,
    hw_rev: u8,
    fw_version: u16,
    day: u8,
    month: u8,
    year: u8
}

struct PwrSrc_GetType_Request {
    command: u8 = h00
}

# GetStatus

mask PwrSrcStatus : u24 {
    Overtemperature     = B7,
    BatTempHigh         = B6,
    BatMissing          = B5,
    BatShorted          = B4,
    ChargerSuspended    = ~B2 & ~B3,
    ChargerCstCurrnet   = ~B2 &  B3,
    ChargerCstVoltage   =  B2 & ~B3,
    ChargerMaintenance  =  B2 &  B3,
    BatState            = B1,
    Rser                = B0,

    VinHigh             = B15,
    VinLow              = B14,
    VsysHigh            = B13,
    VsysLow             = B12,
    VbatHigh            = B11,
    VbatLow             = B10,
    IbatLow             = B9,
    IinHigh             = B8,

    CcuDisabled         = ~B22 & ~B23,
    CcuOk               = ~B22 &  B23,
    CcuDown             =  B22 & ~B23,
    CcuNearOverload     =  B22 &  B23,

    OutHc               = B21,

    OutDisabled         = ~B19 & ~B20,
    OutOk               = ~B19 &  B20,
    OutDown             =  B19 & ~B20,
    OutNearOverload     =  B19 &  B20,

    ReducerEn           = B18,
    VSupHigh            = B17,
    VsupLow             = B16
}

struct PwrSrc_GetStatus_Response {
    status: PwrSrcStatus
}

struct PwrSrc_GetStatus_Request {
    command: u8 = h01
}

# Get S/N

struct PwrSrc_SN_Response {
    serial_number: u32
}

struct PwrSrc_SN_Request {
    command: u8 = h02
}

struct PwrSrc_GetAnalog_Response {
    v_sup : u16,
    v_in : u16,
    i_in : u16,
    v_sys : u16,
    t_chip : u16, # [s]
    v_bat : u16,
    i_bat : u16, # [s]
    r_bat : u16,
    t_bat : u16, # [s]
    v_out : u16,
    i_out : u16,
    v_ccu : u16,
    i_ccu : u16
}

struct PwrSrc_GetAnalog_Request {
    command: u8 = h03
}

struct PwrSrc_GetFWVersion_Response {
    version: u16,
    day: u8,
    month: u8,
    year: u8
}

struct PwrSrc_GetFWVersion_Request {
    command: u8 = h04
}

struct PwrSrc_GetClock_Response {
    day: u8,
    month: u8,
    year: u8,
    wday: u8,
    hour: u8,
    minute: u8,
    second: u8
}

struct PwrSrc_GetClock_Request {
    command: u8 = h05
}

struct PwrSrc_SetClock_Request {
    command: u8 = h06,
    day: u8,
    month: u8,
    year: u8,
    wday: u8,
    hour: u8,
    minute: u8,
    second: u8
}

struct PwrSrc_EnableCharger_Request {
    command: u8 = h07,
    enable: u8
}

struct PwrSrc_EnableOut_Request {
    command: u8 = h08,
    enable: u8
}

struct PwrSrc_EnableOutHC_Request {
    command: u8 = h09,
    enable: u8
}

struct PwrSrc_EnableReducer_Request {
    command: u8 = h0A,
    enable: u8
}

struct PwrSrc_GetCapacity_Request {
    command: u8 = h0B
}

struct PwrSrc_GetCapacity_Response {
    capacity: u8
}

struct PwrSrc_SetCapacity_Request {
    command: u8 = h0C,
    capacity: u8
}

struct PwrSrc_GetSoC_Request {
    command: u8 = h0D,
    size: u8 = 1
}

struct PwrSrc_GetSoC_Response {
    soc: u8
}

struct PwrSrc_GetSoH1_Request {
    command: u8 = h0E
}

struct PwrSrc_GetSoH1_Response {
    soh: u8
}

struct PwrSrc_GetSoH2_Request {
    command: u8 = h0F
}

struct PwrSrc_GetSoH2_Response {
    soh: u8
}

struct PwrSrc_GetMaxChargeCurrent_Request {
    command: u8 = h10,
    max_charge_current: u16
}

struct PwrSrc_GetMaxChargeCurrent_Response {
    max_charge_current: u16
}

struct PwrSrc_SetMaxChargeCurrent_Request {
    command: u8 = h11,
    max_charge_current: u16
}

struct PwrSrc_GetMaxOutCurrent_Request {
    command: u8 = h12,
    max_charge_current: u16
}

struct PwrSrc_GetMaxOutCurrent_Response {
    max_charge_current: u16
}

mask PwrSrcChargerDiagnostics : u16 {
    intvcc_gt2p8v       = B0,
    intvcc_gt_4p3v      = B1,
    vin_gt_vbat         = B2,
    vin_ovlo            = B3,
    thermal_shutdown    = B4,
    no_rt               = B5,
    ok_to_charge        = B6,
    lead_acid_temp_comp = B7,
    cell_count_error    = B8,
    drvcc_good          = B9,
    equalize_req        = B10,
    mppt_en_pin         = B11,
    unused              = B12,
    charger_enabled     = B13,
    vin_uvcl_active     = B14,
    iin_limit_active    = B15
}

struct PwrSrc_GetChargerDiagnostics_Request {
    command: u8 = h13
}

struct PwrSrc_GetChargerDiagnostics_Response {
    diagostics: PwrSrcChargerDiagnostics
}

struct PwrSrc_GetStatistics_Request {
    command: u8 = hF0,
    to_read: u16
}

struct PwrSrc_GetStatistics_Response {
    length: u16 = data.dimension,
    data: [u8]
}

struct PwrSrc_GetStatisticsLength_Request {
    command: u8 = hF1,
    length: u64
}

struct PwrSrc_GetStatisticsLength_Response {
    length: u64
}

struct PwrSrc_SetStatisticsPtrS_Request {
    command: u8 = hF2
}

struct PwrSrc_GetHistory_Request {
    command: u8 = hF3,
    length: u16
}

struct PwrSrc_GetHistory_Response{
    length: u16 = data.dimension,
    data: [u8]
}

struct PwrSrc_GetHistoryLength_Request {
    command: u8 = hF4,
    length: u64
}

struct PwrSrc_GetHistoryLength_Response {
    length: u64
}

struct PwrSrc_SetHistoryPtrS_Request {
    command: u8 = hF5
}

enum PwrSrcMemoryType : u8 {
    FirmwareInfoSpace = 1,
    NewFirmwareSpace = 2,
    OldFirmwareSpace = 3,
    AllFirmwareSpace = 4,
    StatisticsSpace = 5,
    EventSpace = 6,
    StatisticsAndEventSpace = 7,
    ChipErase = 8
}

struct PwrSrc_MemoryClear_Request {
    command: u8 = hDE,
    type: PwrSrcMemoryType
}

struct PwrSrc_NewFirmwareData_Request {
    command:    u8 = hE0,
    byte0:      u8 = hE0,
    address:    u24,
    length:     u16 = data.size,
    data:       [u8],
    crc:        u16
}

struct PwrSrc_ConfirmFWBlockReception_Request {
    command: u8 = hE1
}

enum PwrSrcConfirmFWBlockStatus : u8 {
    Ok = 0,
    BadDescriptor = 1,
    CrcError = 2,
    FlashWriteError = 3
}

struct PwrSrc_ConfirmFWBlockReception_Response {
    status: PwrSrcConfirmFWBlockStatus,
    address: u24,
    length: u16,
    corrupted_sector_addr: u64
}

struct PwrSrc_ProgramMCU_Request {
    command: u8 = hE2,
    byte0:   u8 = hE0,
    day: u8,
    month: u8,
    year: u8,
    fw_version: u16,
    crc: u16,
    nr_segments: u16
}

struct PwrSrc_RevertToPreviousFW_Request {
    command: u8 = hE3,
    byte0: u8   = hE0
}

struct PwrSrc_SaveActualFW {
    command: u8 = hE4,
    byte0: u8 = hE0
}

view PwrSrc_Request {
    PwrSrc_GetType_Request,
    PwrSrc_GetStatus_Request,
    PwrSrc_SN_Request,
    PwrSrc_GetAnalog_Request,
    PwrSrc_GetFWVersion_Request,
    PwrSrc_GetClock_Request,
    PwrSrc_SetClock_Request,
    PwrSrc_EnableCharger_Request,
    PwrSrc_EnableOut_Request,
    PwrSrc_EnableOutHC_Request,
    PwrSrc_EnableReducer_Request,
    PwrSrc_GetCapacity_Request,
    PwrSrc_SetCapacity_Request,
    PwrSrc_GetSoC_Request,
    PwrSrc_GetSoH1_Request,
    PwrSrc_GetSoH2_Request,
    PwrSrc_GetMaxChargeCurrent_Request,
    PwrSrc_SetMaxChargeCurrent_Request,
    PwrSrc_GetMaxOutCurrent_Request,
    PwrSrc_GetChargerDiagnostics_Request,
    PwrSrc_GetStatistics_Request,
    PwrSrc_GetStatisticsLength_Request,
    PwrSrc_SetStatisticsPtrS_Request,
    PwrSrc_GetHistory_Request,
    PwrSrc_GetHistoryLength_Request,
    PwrSrc_SetHistoryPtrS_Request,
    PwrSrc_MemoryClear_Request,
    PwrSrc_NewFirmwareData_Request,
    PwrSrc_ConfirmFWBlockReception_Request,
    PwrSrc_ProgramMCU_Request,
    PwrSrc_RevertToPreviousFW_Request
}

view PwrSrc_Response {
    PwrSrc_GetType_Response,
    PwrSrc_GetStatus_Response,
    PwrSrc_SN_Response,
    PwrSrc_GetAnalog_Response,
    PwrSrc_GetFWVersion_Response,
    PwrSrc_GetClock_Response,
    PwrSrc_GetChargerDiagnostics_Response,
    PwrSrc_GetStatistics_Response,
    PwrSrc_GetStatisticsLength_Response,
    PwrSrc_GetHistory_Response,
    PwrSrc_GetHistoryLength_Response,
    PwrSrc_ConfirmFWBlockReception_Response
}